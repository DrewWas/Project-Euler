# Even Fibonacci numbers 

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def f(n):
    l = [0, 1]
    i = 0
    next_value = 0
    total = 0
    while next_value < n:
        if next_value % 2 == 0:
            total += next_value
        next_value = l[i] + l[i + 1]
        l.append(next_value)
        i += 1
    

    return total 


print(f(4000000))


# for some reason, the function above goes one fib number above 4 million, but the first fib number above 4 million is odd, so luckily it didnt really matter, and if it did, I guess we could have just popped it from the list. Regardless, not really sure why it went over
